#!$SHELL
export EDITOR="emacsclient -c"
export LESS="$LESS -iRs"
export LC_ALL=
export LC_COLLATE="C"
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow'
export GOPATH="$HOME/.go"

if [ "${LESS#*-iRs}" = "$LESS" ] ; then
    export LESS="$LESS -iRs"
fi

#PATH handling
if [ "${PATH#*$HOME/.local/bin}" = "$PATH" ] && [ -d "$HOME/.local/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi

alias vi='vim'
alias ls='ls --color=auto'
alias grep='grep --colour=auto'
alias x='startx'
alias ta='tmux a -d > /dev/null || tmux'
alias taa='tmux a > /dev/null || tmux'
alias undb='killall Xephyr ; export DISPLAY=":0.0" PS1=${PS1##*AWDB }'
alias mtr='mtr --curses'
alias myip='curl icanhazip.com'
alias wifi='sudo wifi-menu'
alias o='xdg-open'
alias om='nice -n20 ionice -c3 offlineimap; nice -n20 ionice -c3 mu index'
alias t=task
alias to=taskopen
alias ix='curl -F "f:1=<-" ix.io'

#Games :)
#alias megarace='dosbox -conf ~/dosbox/MEGARACE/dosbox-0.74.conf -c "mount c ~/dosbox" -c "mount e ~/dosbox/megarace_cd" -c c: -c "cd MEGARACE" MEGARACE.BAT'
#alias engage=""
#play -n -c1 synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +14
#play -n -c1 synth whitenoise band 100 20 compand .3,.8 -1,-10 gain +20
#play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1

# Keychain
ssh_keys=$(find ~/.ssh -name id_\* -and \! -name \*.pub)
#gpg_keys=$(gpg -K | grep 'sec ' | awk '{ print $2 }' | cut -d'/' -f 2)
gpg_keys=""
GPG_TTY=$(tty)
export GPG_TTY

if [ "$EUID" -gt 1 ] || [ "$(id -u)" -gt 1 ] ; then
    if [ -f "$(command -v keychain)" ] ; then
        eval "$(keychain --eval -q "$ssh_keys" "$gpg_keys")"
    fi
fi

# Python environ handling
if [ -f "$(command -v direnv)" ] ; then
    if [ -z ${ZSH_NAME+x} ] ; then
        eval "$(direnv hook bash)"
    elif [ -z ${BASH+x} ] ; then
        eval "$(direnv hook zsh)"
    fi
elif [ -f "$(command -v pyenv)" ] ; then
    echo "Using pyenv."
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
elif [ -f "$(command -v virtualenvwrapper.sh)" ] ; then
    echo "Using virtualenvwrapper."
    export WORKON_HOME=~/.virtualenvs
    # shellcheck source=/dev/null
    . "$(command -v virtualenvwrapper.sh)"
fi

# Nix
if [ -f /etc/profile.d/nix.sh ] ; then
    . /etc/profile.d/nix.sh
fi

d () {
    for word in "$@" ; do
        curl dict://dict.org/d:"${word}" 2> /dev/null | less -FX
    done
}

urxvtcd () {
    urxvtc "$@"
    if [ $? -eq 2 ]; then
        urxvtd -q -o -f
        urxvtc "$@"
    fi
}

toweb () {
    if [ -n "$1" ] ; then
        rsync -SHPcavy "$@" igal:/var/www/files/
        for x in "$@" ; do
            echo "http://files.pflug.email/$(basename "${x}" | sed 's/ /%20/g')"
        done
    else
        echo "What should be sent?"
    fi
}

opng () {
    if [ -n "$1" ] ; then
        if [ -f "$(command -v parallel)" ] ; then
            command -v advpng > /dev/null && parallel advpng -z4 ::: "$@"
            command -v ect > /dev/null && parallel ect --strict -9 ::: "$@"
            command -v optipng > /dev/null && parallel optipng -o7 -zw32k -p ::: "$@"
        else
            command -v advpng > /dev/null && advpng -z4 "$@"
            command -v ect > /dev/null && ect --strict -9 "$@"
            command -v optipng > /dev/null && optipng -o7 -zw32k -p "$@"
        fi
    fi
}

wp () {
    if [ -n "$1" ] ; then
        for img in "$@" ; do
            if [ -z "${img#*.png}" ] ; then
                opng "$img"
            elif [ -z "${img#*.jpg}" ] ; then
                jpegoptim "$img"
            fi
            mv -i "$@" ~/wallpapers
        done
    fi
}

waitfor () {
    while pgrep -f "$1" > /dev/null ; do
        sleep 30
    done
}

sudofor () {
    while pgrep -f "$1" > /dev/null ; do
        sudo -v
        sleep 4m
    done
}

setproxy () {
    export HTTP_PROXY="$1"
    export HTTPS_PROXY="$HTTP_PROXY"
    export FTP_PROXY="$HTTP_PROXY"
    export SOCKS_PROXY="$HTTP_PROXY"
    export http_proxy="$HTTP_PROXY"
    export https_proxy="$HTTP_PROXY"
    export ftp_proxy="$HTTP_PROXY"
    export socks_proxy="$HTTP_PROXY"
}

cpterminfo () {
    infocmp | ssh "$1" "cat | tic -x -"
}

if [ -e ~/.commonrc_local ] ; then
    . ~/.commonrc_local
fi
