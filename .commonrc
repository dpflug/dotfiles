#!$SHELL
# shellcheck shell=sh
export EDITOR="emacsclient -c"
export LC_ALL=
export LC_COLLATE="C"
export FZF_DEFAULT_COMMAND='rg --files --hidden --follow'
export GOPATH="$HOME/.go"

if [ "${LESS#*-iRs}" = "$LESS" ]; then
	export LESS="$LESS -iRs"
fi

#PATH handling
pathmunge() {
	case ":${PATH}:" in
	*:"$1":*) ;;
	*)
		if [ "$2" = "after" ]; then
			PATH=$PATH:$1
		else
			PATH=$1:$PATH
		fi
		;;
	esac
}

for dir in ".local/share" ".local" ".go" ".roswell" ".cargo"; do
	if [ "${PATH#*"$HOME"/"${dir}"/bin}" = "$PATH" ] && [ -d "$HOME/${dir}/bin" ]; then
		pathmunge "$HOME/${dir}/bin" after
	fi
done

if type nvim >/dev/null; then
	alias vi='nvim'
	alias vim='nvim'
else
	alias vi='vim'
fi
alias ls='ls --color=auto'
alias grep='grep --colour=auto'
alias x='startx'
alias ta='tmux a -d > /dev/null || tmux'
alias taa='tmux a > /dev/null || tmux'
alias undb='killall Xephyr ; export DISPLAY=":0.0" PS1=${PS1##*AWDB }'
alias mtr='mtr --curses'
alias myip='curl icanhazip.com'
alias wifi='sudo wifi-menu'
alias o='xdg-open'
alias om='nice -n20 ionice -c3 offlineimap; nice -n20 ionice -c3 mu index'
alias t=task
alias to=taskopen
alias ix='curl -F "f:1=<-" ix.io'
alias gea="guix environment --ad-hoc"
alias sudo="sudo " # Lets me use other aliases via sudo

#Games :)
#alias megarace='dosbox -conf ~/dosbox/MEGARACE/dosbox-0.74.conf -c "mount c ~/dosbox" -c "mount e ~/dosbox/megarace_cd" -c c: -c "cd MEGARACE" MEGARACE.BAT'
#alias engage=""
#play -n -c1 synth whitenoise lowpass -1 120 lowpass -1 120 lowpass -1 120 gain +14
#play -n -c1 synth whitenoise band 100 20 compand .3,.8 -1,-10 gain +20
#play -n -c1 synth whitenoise band -n 100 20 band -n 50 20 gain +25  fade h 1 864000 1

# Ensure GPG prompts here
GPG_TTY=$(tty)
export GPG_TTY

# Keychain
# Disabling complaint of EUID being non-POSIX. It's just a speedup.
# shellcheck disable=SC3028
if [ "$EUID" -gt 1 ] || [ "$(id -u)" -gt 1 ]; then
	if [ -f "$(command -v keychain)" ]; then
		ssh_keys=$(find ~/.ssh -name id_\* -and \! -name \*.pub)
		#gpg_keys=$(gpg -K | grep 'sec ' | awk '{ print $2 }' | cut -d'/' -f 2)
		gpg_keys=""
		eval "$(keychain --eval -q "$ssh_keys" "$gpg_keys")"
		unset gpg_keys
		unset ssh_keys
	fi
fi

# Python environ handling
if [ -f "$(command -v direnv)" ]; then
	if [ -z ${ZSH_NAME+x} ]; then
		eval "$(direnv hook bash)"
	elif [ -z ${BASH+x} ]; then
		eval "$(direnv hook zsh)"
	fi
elif [ -f "$(command -v pyenv)" ]; then
	echo "Using pyenv."
	eval "$(pyenv init -)"
	eval "$(pyenv virtualenv-init -)"
elif [ -f "$(command -v virtualenvwrapper.sh)" ]; then
	echo "Using virtualenvwrapper."
	export WORKON_HOME=~/.virtualenvs
	# shellcheck source=/dev/null
	. "$(command -v virtualenvwrapper.sh)"
fi

# fzf & fd
if [ -f "$(command -v fzf)" ] && [ -f "$(command -v fd)" ]; then
	export FZF_DEFAULT_COMMAND="fd . $HOME"
	export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
	export FZF_ALT_C_COMMAND="fd -t d . $HOME"
fi

d() {
	for word in "$@"; do
		curl dict://dict.org/d:"${word}" 2>/dev/null | less -FX
	done
}

urxvtcd() {
	urxvtc "$@"
	if [ $? -eq 2 ]; then
		urxvtd -q -o -f
		urxvtc "$@"
	fi
}

toweb() {
	if [ -n "$1" ]; then
		rsync -SHPcavy "$@" igal:/var/www/files/ &&
			for x in "$@"; do
				echo "http://files.pflug.io/$(basename "${x}" | sed 's/ /%20/g')"
			done
	else
		echo "What should be sent?"
	fi
}

opng() {
	if [ -n "$1" ]; then
		if [ -f "$(command -v parallel)" ]; then
			command -v advpng >/dev/null && parallel advpng -z4 ::: "$@"
			command -v ect >/dev/null && parallel ect --strict -9 ::: "$@"
			command -v optipng >/dev/null && parallel optipng -o7 -zw32k -p ::: "$@"
		else
			command -v advpng >/dev/null && advpng -z4 "$@"
			command -v ect >/dev/null && ect --strict -9 "$@"
			command -v optipng >/dev/null && optipng -o7 -zw32k -p "$@"
		fi
	fi
}

wp() {
	if [ -n "$1" ]; then
		for img in "$@"; do
			if [ -z "${img#*.png}" ]; then
				opng "$img"
			elif [ -z "${img#*.jpg}" ]; then
				jpegoptim "$img"
			fi
			mv -i "$@" ~/wallpapers
		done
	fi
}

waitfor() {
	while pgrep -f "$1" >/dev/null; do
		sleep 30
	done
}

sudofor() {
	while pgrep -f "$1" >/dev/null; do
		sudo -v
		sleep 4m
	done
}

setproxy() {
	export HTTP_PROXY="$1"
	export HTTPS_PROXY="$HTTP_PROXY"
	export FTP_PROXY="$HTTP_PROXY"
	export SOCKS_PROXY="$HTTP_PROXY"
	export http_proxy="$HTTP_PROXY"
	export https_proxy="$HTTP_PROXY"
	export ftp_proxy="$HTTP_PROXY"
	export socks_proxy="$HTTP_PROXY"
}

cpterminfo() {
	infocmp | ssh "$1" "cat | tic -x -"
}

gear() {
	guix environment --ad-hoc "$1" -- "$@"
}

if [ -e ~/.commonrc_local ]; then
	# shellcheck source=/home/dpflug/.commonrc_local disable=SC1091
	. ~/.commonrc_local
fi
